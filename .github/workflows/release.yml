name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-json-report

    - name: Run tests
      run: |
        python -m testing.test_strategy ci

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub (optional)
      if: secrets.DOCKERHUB_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME }}/futures-trading-log
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build-windows-installer:
    needs: test
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Inno Setup
      run: |
        choco install innosetup -y

    - name: Download Redis for Windows
      run: |
        New-Item -ItemType Directory -Force -Path vendor\redis
        Invoke-WebRequest -Uri "https://github.com/microsoftarchive/redis/releases/download/win-3.0.504/Redis-x64-3.0.504.zip" -OutFile redis.zip
        Expand-Archive -Path redis.zip -DestinationPath vendor\redis -Force
        Remove-Item redis.zip

    - name: Download NSSM
      run: |
        New-Item -ItemType Directory -Force -Path vendor\nssm
        Invoke-WebRequest -Uri "https://nssm.cc/release/nssm-2.24.zip" -OutFile nssm.zip
        Expand-Archive -Path nssm.zip -DestinationPath vendor\nssm -Force
        Move-Item -Path vendor\nssm\nssm-2.24\win64 -Destination vendor\nssm\win64 -Force
        Remove-Item -Recurse -Force vendor\nssm\nssm-2.24
        Remove-Item nssm.zip

    - name: Create application icon placeholder
      run: |
        New-Item -ItemType Directory -Force -Path static\images
        # In production, replace this with actual icon creation
        echo "Icon placeholder" | Out-File -FilePath static\images\icon.ico -Encoding ASCII

    - name: Build Windows installer
      run: |
        python build_installer.py

    - name: Upload installer artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-installer
        path: Output\*.exe
        retention-days: 5

    - name: Calculate installer checksum
      id: checksum
      run: |
        $installer = Get-ChildItem -Path Output\*.exe | Select-Object -First 1
        $hash = Get-FileHash -Path $installer.FullName -Algorithm SHA256
        echo "sha256=$($hash.Hash)" >> $env:GITHUB_OUTPUT
        echo "filename=$($installer.Name)" >> $env:GITHUB_OUTPUT

    - name: Create checksum file
      run: |
        $installer = Get-ChildItem -Path Output\*.exe | Select-Object -First 1
        $hash = Get-FileHash -Path $installer.FullName -Algorithm SHA256
        "$($hash.Hash)  $($installer.Name)" | Out-File -FilePath Output\SHA256SUMS.txt -Encoding ASCII

  create-release:
    needs: [build-docker, build-windows-installer]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows installer
      uses: actions/download-artifact@v3
      with:
        name: windows-installer
        path: ./release-artifacts

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        cat > release_notes.md << EOF
        # Futures Trading Log v${VERSION}

        ## Installation Options

        ### Windows Native Installer
        - Download \`FuturesTradingLog-Setup-v${VERSION}.exe\`
        - Run as administrator
        - All services (Flask, Redis, Celery, File Watcher) are automatically installed and configured as Windows Services
        - Application accessible at http://localhost:5555

        ### Docker
        Docker images are available on GitHub Container Registry and Docker Hub:

        \`\`\`bash
        # Using GitHub Container Registry
        docker pull ghcr.io/${{ github.repository }}:${VERSION}

        # Using Docker Hub (if configured)
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/futures-trading-log:${VERSION}
        \`\`\`

        Run with Docker Compose:
        \`\`\`bash
        docker-compose up -d
        \`\`\`

        ## What's New

        See CHANGELOG.md for detailed changes in this release.

        ## Verification

        Windows Installer SHA256 checksum:
        \`\`\`
        $(cat ./release-artifacts/SHA256SUMS.txt)
        \`\`\`

        Docker Image:
        \`\`\`
        ghcr.io/${{ github.repository }}:${VERSION}
        \`\`\`

        ## System Requirements

        ### Windows Installer
        - Windows 10 or Windows 11 (64-bit)
        - Administrator privileges for installation
        - 2GB RAM minimum, 4GB recommended
        - 500MB free disk space

        ### Docker
        - Docker 20.10+
        - Docker Compose 2.0+
        - 2GB RAM minimum, 4GB recommended

        ## Documentation

        - [Installation Guide](docs/DEPLOYMENT.md)
        - [Quick Start Guide](docs/QUICK_START_GUIDE.md)
        - [Configuration Guide](docs/CONFIGURATION_HIERARCHY.md)
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          ./release-artifacts/*.exe
          ./release-artifacts/SHA256SUMS.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on success
      if: success()
      run: |
        echo "âœ… Release ${{ github.ref_name }} created successfully!"
        echo "   - Windows installer uploaded"
        echo "   - Docker images published"
        echo "   - Release notes generated"
